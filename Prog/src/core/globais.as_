package core 
{
	/**
	 * ...
	 * @author Timewave Games
	 */
	
	
	import mapas.mapas;
	import org.flixel.*; 
	import stages.Portal;
	
	public class globais
	{
		
		//Tileset do messias
		[Embed(source = '../../../Art/Release/tileset_max.png')] 													public static const ImgTileset		:	Class;
		
		//layer0 da primeira fase (elementos colidíveis para gufos e messias)
		[Embed(source = '../../../Design/Release/Levels/level0/layer0.txt', mimeType = "application/octet-stream")] public static const Stage1_layer0	:	Class;	
		//layer1 da primeira fase (elementos não colidíveis para gufos: agua)
		[Embed(source = '../../../Design/Release/Levels/level0/layer1.txt', mimeType = "application/octet-stream")] public static const Stage1_layer1	:	Class;
		
		//	Acho que o melhor seria ter um xml de defaults para os gufos e um para as torres. Cada um no seu modulo. [Brizo]
		[Embed(source='defaults.xml',mimeType="application/octet-stream")] public static const xml_defaults:Class;
		
		//armazena o mapa corrente do cenario
		public static var mapa			:	mapas							;
		
		//armazena as torres que estão no cenário
		public static var towers		:	FlxGroup						;
		
		//armazena os gufos que estão no cenário
		public static var enemies		:	FlxGroup						;
		
		//armazena os gufos que estão no cenário
		public static var enemiesWater	:	FlxGroup						;
		
		//armazena os projeteis que estao no cenario
		public static var projetiles	:	FlxGroup						;
		
		//portal que vai no cenario
		public static var portal		:	Portal						    ;
		
		//array de atributos que vem do xml
		public static var gufoAtributes	:	Array 		= new Array()		;
		
		//array de atributos das torres, que vem do xml
		public static var towersAttributes:	Array 		= new Array()		;
		
		//Ponteiro pra layer 0 do stage corrente
		public static var layer0 		:	Class							;
		
		//Ponteiro para layer 1 do stage corrente
		public static var layer1 		:	Class							;
		
		
		
		
		public function globais() 
		{
			
		}
		
		////////////////////////////////////////////////////////////////////////////////////////////
		///FUNCOES QUE VERIFICAM QUAL TILE O PERSONAGEM COLIDE//////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////////
		
		//Retorna o valor as coordenadas x e y do tile que está a direita do objeto de tamanho size.
		//Resolve o problema da construção da torre em GRIDS
		public static function getXYRightTile(objeto:FlxPoint,size:uint)	:	FlxPoint
		{
			var CentroPlayerX:uint = objeto.x + (size / 2);
			var CentroPlayerY:uint = objeto.y + (size / 2 );
			
			var DistanciaEntreX:uint = CentroPlayerX + (16 / 2) + 1;
			var DistanciaEntreY:uint = CentroPlayerY + (size / 2) - 1;
			
			return new FlxPoint( (Math.floor((DistanciaEntreX / size)) * size), Math.floor((DistanciaEntreY) / size) * size );

		}
		
		//Retorna o valor as coordenadas x e y do tile que está a esquerda do objeto de tamanho size.
		//Resolve o problema da construção da torre em GRIDS.
		public static function getXYLeftTile(objeto:FlxPoint,size:uint)	:	FlxPoint
		{
			var CentroPlayerX:uint = objeto.x + (size / 2 );
			var CentroPlayerY:uint = objeto.y + (size / 2 );
			
			var DistanciaEntreX:uint = CentroPlayerX - (16 / 2) - 1;
			var DistanciaEntreY:uint = CentroPlayerY + (size / 2) - 1;
			
			return new FlxPoint( (Math.floor((DistanciaEntreX / size)) * size), Math.floor((DistanciaEntreY) / size) * size );

		}
		
		
		//Retorna o tipo de tile que está abaixo do player.
		public static function getBottomTile(mapa:FlxTilemap, objeto:FlxPoint, size:uint)	:	uint 
		{
			var CentroPlayerX:uint = objeto.x + (size / 2 );
			var CentroPlayerY:uint = objeto.y + (size / 2 );
			
			var DistanciaEntreX:uint = CentroPlayerX;
			var DistanciaEntreY:uint = CentroPlayerY + (size / 2) + 1;
			
			
			return mapa.getTile(Math.floor((DistanciaEntreX) / size), Math.floor((DistanciaEntreY) / size)); 		
		}
		
		//Retorna o tipo de tile que está a direita do player
		public static function getRightTile(mapa:FlxTilemap, objeto:FlxPoint, size:uint)	:	uint 
		{
			var CentroPlayerX:uint = objeto.x + (size / 2 );
			var CentroPlayerY:uint = objeto.y + (size / 2 );
			
			var DistanciaEntreX:uint = CentroPlayerX + (size / 2) + 1;
			var DistanciaEntreY:uint = CentroPlayerY + (size / 2) - 1;
			
			
			return mapa.getTile(Math.floor((DistanciaEntreX)/ size), Math.floor((DistanciaEntreY)/ size)); 	
			
		}
		
		//retorna o tipo de tile que está a esquerda do player
		public static function getLeftTile(mapa:FlxTilemap, objeto:FlxPoint, size:uint)		:	uint 
		{
			var CentroPlayerX:uint = objeto.x + (size / 2 );
			var CentroPlayerY:uint = objeto.y + (size / 2 );
			
			var DistanciaEntreX:uint = CentroPlayerX - (size / 2) - 1;
			var DistanciaEntreY:uint = CentroPlayerY + (size / 2) - 1;
			
			
			return mapa.getTile(Math.floor((DistanciaEntreX)/ size), Math.floor((DistanciaEntreY)/ size)); 	
		}	
		
		//retorna o tipo de tile que está acima do player
		public static function getTopTile(mapa:FlxTilemap, objeto:FlxPoint, size:uint)	:	uint 
		{
			var CentroPlayerX:uint = objeto.x + (size / 2 );
			var CentroPlayerY:uint = objeto.y + (size / 2 );
			
			var DistanciaEntreX:uint = CentroPlayerX;
			var DistanciaEntreY:uint = CentroPlayerY - (size / 2) - 1;
			
			
			return mapa.getTile(Math.floor((DistanciaEntreX)/ size), Math.floor((DistanciaEntreY)/ size)); 	
			
		}
		
		/////////////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////////////
		
		static public function keyPressed(tecla:String) : Boolean
		{
			
			switch(tecla)
			{
				
				case "LEFT"			:
					return (FlxG.keys.LEFT || FlxG.keys.A);
				break;

				case "RIGHT"		:
					return (FlxG.keys.RIGHT || FlxG.keys.D);
				break;
	
				case "UP"			:
					return (FlxG.keys.UP || FlxG.keys.W);
				break;

				case "DOWN"			:
					return (FlxG.keys.DOWN || FlxG.keys.S);
				break;
				
				case "BUILD" 		:
					return (FlxG.keys.SPACE || FlxG.keys.B);
				break;
				default	:
					return false;
				
			}
			
		}
		
		static public function keyJustPressed(tecla:String) : Boolean
		{
			
			switch(tecla)
			{
				
				case "LEFT"			:
					return (FlxG.keys.justPressed("LEFT") || FlxG.keys.justPressed("A"));
				break;

				case "RIGHT"		:
					return (FlxG.keys.justPressed("RIGHT") || FlxG.keys.justPressed("D"));
				break;
	
				case "UP"			:
					return (FlxG.keys.justPressed("UP") || FlxG.keys.justPressed("W"));
				break;

				case "DOWN"			:
					return (FlxG.keys.justPressed("DOWN") || FlxG.keys.justPressed("S"));
				break;
				
				case "BUILD"		:
					return (FlxG.keys.justPressed("SPACE") || FlxG.keys.justPressed("B"));
				break;
				
				default	:
					return false;
				
			}
			
		}
		

		static public function keyJustReleased(tecla:String) : Boolean
		{
			
			switch(tecla)
			{
				
				case "LEFT"			:
					return (FlxG.keys.justReleased("LEFT") || FlxG.keys.justReleased("A"));
				break;

				case "RIGHT"		:
					return (FlxG.keys.justReleased("RIGHT") || FlxG.keys.justReleased("D"));
				break;
	
				case "UP"			:
					return (FlxG.keys.justReleased("UP") || FlxG.keys.justReleased("W"));
				break;

				case "DOWN"			:
					return (FlxG.keys.justReleased("DOWN") || FlxG.keys.justReleased("S"));
				break;
				
				case "BUILD"		:
					return (FlxG.keys.justReleased("SPACE") || FlxG.keys.justReleased("B"));
				break;
				
				default	:
					return false;
				
			}
			
		}
		
		
		//	FIRE
		static public function pressedFIRE(): Boolean
		{
			return (FlxG.keys.N || FlxG.mouse.pressed());
		}
		
		static public function justPressedFIRE(): Boolean
		{
			return (FlxG.keys.justPressed("N") || FlxG.mouse.justPressed());
		}
		
		static public function keyReleasedFIRE(): Boolean
		{
			return !(FlxG.keys.N || !(FlxG.mouse.pressed()));
		}
		
		static public function keyJustReleasedFIRE(): Boolean
		{
			return (FlxG.keys.justReleased("N") || FlxG.mouse.justReleased());
		}
		
	}

}